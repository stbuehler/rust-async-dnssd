on: [push, pull_request]

name: Rust CI

jobs:
  apt-warmup-cache:
    name: Warmup apt cache
    runs-on: ubuntu-latest
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev

  # if this fails we don't try anything else on stable
  #
  # we use multiple jobs so no single check prevents others from being run;
  # but use a cache to speedup steps after build
  # (if initial build fails nothing else is checked)
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: apt-warmup-cache
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev
      # ---
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Build
        run: cargo build --all-targets
      - name: Build with all features
        run: cargo build --all-targets --all-features
      - name: "Cache save: stable"
        uses: actions/cache/save@v4
        with:
          key: build-stable-${{ github.run_id }}
          path: |
            /usr/share/rust/.cargo/
            ~/.cargo
            target/

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev
      # ---
      - uses: actions/checkout@v5
      - name: "Cache restore: stable"
        id: restore-rust-stable
        uses: actions/cache/restore@v4
        with:
          key: build-stable-${{ github.run_id }}
          path: |
            /usr/share/rust/.cargo/
            ~/.cargo
            target/
      - uses: dtolnay/rust-toolchain@stable
        if: steps.restore-rust-stable.outputs.cache-hit != 'true'
      - name: Test
        run: cargo test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build
    # only pull-requests and non-release branches (and not tags)
    if: |-
      ${{
        github.event_name == 'pull_request' || (
          github.event_name == 'push'
          && !startsWith(github.ref, 'refs/heads/release')
          && !startsWith(github.ref, 'refs/tags/')
        )
      }}
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev
      # ---
      - uses: actions/checkout@v5
      - name: "Cache restore: stable"
        id: restore-rust-stable
        uses: actions/cache/restore@v4
        with:
          key: build-stable-${{ github.run_id }}
          path: |
            /usr/share/rust/.cargo/
            ~/.cargo
            target/
      - uses: dtolnay/rust-toolchain@stable
        if: steps.restore-rust-stable.outputs.cache-hit != 'true'
        with:
          components: clippy
      - name: Clippy
        run: cargo clippy -- -D warnings

  doc:
    name: Rustdoc
    runs-on: ubuntu-latest
    needs: build
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev
      # ---
      - uses: actions/checkout@v5
      - name: "Cache restore: stable"
        id: restore-rust-stable
        uses: actions/cache/restore@v4
        with:
          key: build-stable-${{ github.run_id }}
          path: |
            /usr/share/rust/.cargo/
            ~/.cargo
            target/
      - uses: dtolnay/rust-toolchain@stable
        if: steps.restore-rust-stable.outputs.cache-hit != 'true'
      - name: Rustdoc
        run: cargo doc --all-features

  # no cache for nightly, run all steps in same job - if one fails, the others won't be tried
  build-nightly:
    name: Build [nightly]
    runs-on: ubuntu-latest
    needs: apt-warmup-cache
    steps:
      # --- install build dependencies
      - name: Install libavahi-compat-libdnssd-dev
        uses: stbuehler/action-apt@v1
        with:
          cache-key: apt-${{ runner.os }}-${{ github.run_id }}
          packages: libavahi-compat-libdnssd-dev
      # ---
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      # nightly fmt
      - name: Rustfmt [nightly]
        run: cargo fmt --all -- --check
      # nightly build
      - name: Build [nightly]
        run: cargo build --all-targets
      # nightly build all features
      - name: Build with all features [nightly]
        run: cargo build --all-targets --all-features
      # test
      - name: Check [nightly]
        run: cargo test --all-features
      # doc_cfg not stable yet
      # https://doc.rust-lang.org/unstable-book/language-features/doc-cfg.html
      # https://github.com/rust-lang/rust/issues/43781
      - name: Rustdoc [nightly]
        env:
          # this should need nightly
          RUSTDOCFLAGS: "--cfg doc_cfg"
        run: cargo doc --all-features
      # deploy docs from nightly for doc_cfg feature
      # (for stable we'd create a new job and use the cache)
      - name: Deploy docs
        uses: stbuehler/action-rs-deploy-doc@v1
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          target: git@github.com:stbuehler/rustdocs
          target-folder: async-dnssd
          ssh-private-key: ${{ secrets.RUSTDOCS_SSH_ED25519 }}
